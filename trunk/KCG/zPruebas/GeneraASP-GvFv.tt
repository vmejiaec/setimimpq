<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\GeneraClases.dll" #>
<#@ import namespace="zGeneraClases" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ include file="$(ProjectDir)\TemplateFilemanager.ttinclude" #>
<#   
	//Parámetros 
	string PathXSD = @"C:\IMPQ\Code\KApu_01\WEB\ADL\Planificacion.xsd";
	string Iniciales = "PLA";
	string TablaBase = "Pla_Cta";
	//Proceso
	var manager = TemplateFileManager.Create(this);
	ExtraeMetaDatos datos = new ExtraeMetaDatos(PathXSD);	
	var tabla = datos.BaseDatos.Find(t => t.Nombre == TablaBase);
	// Genera la página Web ASPX
	manager.StartNewFile(projectName:"zGEN", folderName:Iniciales, name: tabla.Nombre +"_GvFv.aspx" );
	PaginaWebGvFv(Iniciales, tabla);
	// Genera la clase base 
	manager.StartNewFile(projectName:"zGEN", folderName:Iniciales, name: tabla.Nombre +"_GvFv.aspx.cs" );
	ClaseBaseGvFv(Iniciales, tabla);
	// Crea los arhivos 
	manager.Process();	
#>

// Crea una página ASP.NET tipo GridView -  FormView
<#+
  private void PaginaWebGvFv(string Iniciales, genTabla tabla) 
  {
#>
<%@ Page Title="" Language="C#" 
MasterPageFile="~/KOALA.master" 
AutoEventWireup="true" 
CodeFile="<#= tabla.Nombre #>_GvFv.aspx.cs" 
Inherits="<#= Iniciales #>_<#= tabla.Nombre #>_GvFv" %>

  <%@ Register tagprefix="koala" 
    assembly="KoalaWebControls" 
    namespace="Koala.KoalaWebControls" %>

<asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" Runat="Server">
<asp:UpdatePanel runat="server" ID="udp">
<ContentTemplate>
    <div class="panCol3">
    <asp:Panel runat = "server" ID="pgv<#= tabla.Nombre #>" GroupingText="Listado">
    <%--Filtro--%>
    <asp:Panel runat ="server" ID="pBuscar" GroupingText ="Buscar" DefaultButton="btFiltrar">
        <asp:Label ID="lbFiltro" runat="server" Text="Filtro"></asp:Label>
        <asp:TextBox ID="tbFiltro" runat="server"></asp:TextBox>
        <asp:TextBox ID="tbFiltroId" runat="server" CssClass="filtroID"></asp:TextBox>
        <asp:Button runat="server" ID="btFiltrar" Text="..." Visible="true" onclick="btFiltrar_Click" style="display:none" />
        <asp:DropDownList ID="ddlFiltro" runat="server" AutoPostBack="true" onselectedindexchanged="ddlFiltro_SelectedIndexChanged">
            <asp:ListItem Text = "Todos" Value="Todos" ></asp:ListItem>
			<#+ foreach(var pg in tabla.ProcGenericosGet) { 
				if (!string.IsNullOrWhiteSpace(pg.ProcNombreFiltro)) {
            #><asp:ListItem Text = "<#= pg.ProcNombreFiltro #>" Value="<#= pg.ProcNombreFiltro #>" ></asp:ListItem>
			<#+ }} 
        #></asp:DropDownList>
    </asp:Panel>
    <%--GridView--%>
    <asp:Panel runat="server" GroupingText="Registros">
    <asp:GridView ID="gv<#= tabla.Nombre #>" runat="server" AutoGenerateColumns="False" 
        DataKeyNames="Id" AllowPaging="True" DataSourceID="odsgv<#= tabla.Nombre #>" 
        SelectedRowStyle-CssClass="selectedrowstyle" AlternatingRowStyle-CssClass="alternatingrowstyle" 
        HeaderStyle-CssClass="headerstyle" PagerStyle-CssClass="pagerstyle" 
            onselectedindexchanged="gv<#= tabla.Nombre #>_SelectedIndexChanged">
        <Columns>
            <asp:CommandField ButtonType="Button" SelectText="..." ShowSelectButton="True" />
			<#+ foreach(var campo in tabla.Campos){ 
				#><asp:BoundField DataField="<#= campo.Nombre #>" HeaderText="<#= campo.Nombre #>" <#= (campo.Nombre =="Id" || campo.Nombre =="Estado")? "Visible = \"false\"":"" #>  />
			<#+ }
	#></Columns>
    </asp:GridView>
    </asp:Panel>
    </asp:Panel>
    </div>
    <%--FormView--%>
    <div class = "panCol2">
    <asp:Panel runat="server" ID="pfv<#= tabla.Nombre #>" GroupingText="Crear, Editar o Borar un Registro">
    <koala:FormViewSetim ID="fv<#= tabla.Nombre #>" runat="server" DataSourceID="odsfv<#= tabla.Nombre #>" 
            oniteminserting="fv<#= tabla.Nombre #>_ItemInserting" 
            onitemdeleted="fv<#= tabla.Nombre #>_ItemDeleted" 
            oniteminserted="fv<#= tabla.Nombre #>_ItemInserted" 
            onitemupdated="fv<#= tabla.Nombre #>_ItemUpdated">
        <EditItemTemplate>
            <asp:Panel runat="server" ID ="panelEditTemplate" DefaultButton="UpdateButton">
			<#+ FV_Campos_Edit_Insert_Template(tabla); #>
            <asp:Button ID="UpdateButton" runat="server" CausesValidation="True" CommandName="Update" Text="Actualizar" />
            &nbsp;
            <asp:Button ID="UpdateCancelButton" runat="server" CausesValidation="False" CommandName="Cancel" Text="Cancelar" />
            </asp:Panel>
        </EditItemTemplate>
        <InsertItemTemplate>
            <asp:Panel runat="server" ID = "panelInsertTemplate" DefaultButton="InsertButton">
			<#+ FV_Campos_Edit_Insert_Template(tabla); #>
            <asp:Button ID="InsertButton" runat="server" CausesValidation="True" CommandName="Insert" Text="Insertar" />
            &nbsp;
            <asp:Button ID="InsertCancelButton" runat="server" CausesValidation="False" CommandName="Cancel" Text="Cancelar" />
            </asp:Panel>
        </InsertItemTemplate>
        <ItemTemplate>
            <asp:Panel runat="server" ID="panelItemTemplate" DefaultButton="EditButton">
            <#+ FV_Campos_Item_Template(tabla); #>
            <asp:Button ID="EditButton" RunAt="server"  CausesValidation="False" CommandName="Edit" Text="Editar" />
            &nbsp;
            <asp:Button ID="DeleteButton" RunAt="server" CausesValidation="False" CommandName="Delete" Text="Borrar" />
            &nbsp;
            <asp:Button ID="NewButton" RunAt="server" CausesValidation="False" CommandName="New" Text="Nuevo" />
            </asp:Panel>
        </ItemTemplate>
    </koala:FormViewSetim>
        <asp:Label ID="lbFvMsgError" runat="server" Text=":" CssClass="FvMensajeError"></asp:Label>
        <asp:Label ID="lbFvMsgInfo" runat="server" Text=">" CssClass="FvMensajeInfo"></asp:Label>
        <asp:ValidationSummary ID="vsErrorResumen" runat="server"/>
    </asp:Panel>
    </div>
    <%--Fuente de datos para el GridView --%>
    <asp:ObjectDataSource ID="odsgv<#= tabla.Nombre #>" runat="server" 
        SelectMethod="Get" 
        TypeName="FEL.<#= Iniciales #>.BO_<#= tabla.Nombre #>">
        <SelectParameters>
            <asp:SessionParameter Name="s" SessionField="Scope" Type="Object" />
        </SelectParameters>
    </asp:ObjectDataSource>
	<%--Fuente de datos para los procesos genéricos --%>
<#+ foreach(var pg in tabla.ProcGenericosGet) { #>
    <asp:ObjectDataSource ID="odsgv<#= tabla.Nombre #>_<#= pg.ProcNombre #>" runat="server" 
        SelectMethod="<#= pg.ProcNombre #>" 
        TypeName="FEL.<#= Iniciales #>.BO_<#= tabla.Nombre #>">
        <SelectParameters>
            <asp:SessionParameter Name="s" SessionField="Scope" Type="Object" />
			<#+ foreach(var param in pg.Parametros) {
				if ( param.Direccion == "Input" ) {
            #><asp:ControlParameter ControlID="<#= ((pg.ProcNombre).EndsWith("GetById"))? "tbFiltroId": "tbFiltro" #>" Name="<#= param.Nombre #>" PropertyName="Text" Type="<#= param.Tipo #>" />
		<#+ }  }
        #></SelectParameters>
    </asp:ObjectDataSource>
<#+ } #>
    <%--Objetos de Datos para el FormView --%>
    <asp:ObjectDataSource ID="odsfv<#= tabla.Nombre #>" runat="server" 
        SelectMethod="GetById"         
        DeleteMethod="Delete" 
        InsertMethod="InsertINT" 
        UpdateMethod="Update"
        TypeName="FEL.<#= Iniciales #>.BO_<#= tabla.Nombre #>"
        DataObjectTypeName="<#= tabla.Nombre #>"
        ConflictDetection = "CompareAllValues"
        OldValuesParameterFormatString="o"
        oninserted="odsfv<#= tabla.Nombre #>_Inserted" 
        onupdated="odsfv<#= tabla.Nombre #>_Updated" 
		ondeleted="odsfv<#= tabla.Nombre #>_Deleted">
        <SelectParameters>
            <asp:SessionParameter Name="s" SessionField="Scope" Type="Object" />
            <asp:ControlParameter ControlID="gv<#= tabla.Nombre #>" Name="p_Id" PropertyName="SelectedValue" Type="Int32" />
        </SelectParameters>
        <UpdateParameters>
            <asp:Parameter Name="o" Type="Object" />
            <asp:Parameter Name="n" Type="Object" />
        </UpdateParameters>
    </asp:ObjectDataSource>
</ContentTemplate>
</asp:UpdatePanel>
</asp:Content>
<#+ 
  }
#>

<#+ private void FV_Campos_Edit_Insert_Template(genTabla tabla) {
            #><table>
			<#+ foreach(var campo in tabla.Campos){  
            #><tr <#= (campo.Nombre == "Id" ||campo.Nombre == "Estado")? "style=\"display:none\"":"" #>>
                <td> <#= campo.Nombre #> </td>
                <td><asp:TextBox ID="<#= campo.Nombre #>TextBox" runat="server" Text='<%# Bind("<#= campo.Nombre #>") %>' <#+ CssCampoEdit(campo.Nombre); #> />
				<#+ if ( !constantes.CamposNoValidar.Any(c => c == campo.Nombre) ) {
					#><%--Validador--%>
                    <asp:RequiredFieldValidator ID="rq<#= campo.Nombre #>" runat="server" 
                    ControlToValidate="<#= campo.Nombre #>TextBox"
                    ErrorMessage="El campo <#= campo.Nombre #> es obligatorio" 
                    Text="X" Display="Dynamic"/>
				<#+ } #></td>
            </tr>
			<#+ } #></table>
<#+ } #>

<#+ private void CssCampoEdit(string nombre){ 
        switch (nombre)
        {
			case "Nombre":
				#> CssClass="txtEditNombreLargo" TextMode="MultiLine" <#+ 
				break;
			case "Descripcion":
				#> CssClass="txtEditDescripcion" TextMode="MultiLine" <#+ 
				break;
            default:
				#> CssClass="txtEdit" <#+ 
				break;
        }

	} #>

<#+ private void FV_Campos_Item_Template(genTabla tabla) { 
            #><table>
			<#+ foreach(var campo in tabla.Campos){  
            #><tr <#= (campo.Nombre == "Id"||campo.Nombre == "Estado")? "style=\"display:none\"":"" #>>
                <td> <#= campo.Nombre #> </td>
                <td><asp:TextBox ID="<#= campo.Nombre #>TextBox" runat="server" Text='<%# Bind("<#= campo.Nombre #>") %>'  ReadOnly="true" <#+ CssCampoItem(campo.Nombre); #>/></td>
            </tr>
			<#+ } #></table>
<#+ } #>

<#+ private void CssCampoItem(string nombre){ 
        switch (nombre)
        {
			case "Nombre":
				#> CssClass="txtItemNombreLargo" TextMode="MultiLine" <#+ 
				break;
			case "Descripcion":
				#> CssClass="txtItemDescripcion" TextMode="MultiLine" <#+ 
				break;
            default:
				#> CssClass="txtItem" <#+ 
				break;
        }

	} #>

<#+  
  private void ClaseBaseGvFv (string Iniciales, genTabla tabla)
  {
#>
using System;
using FEL.<#= Iniciales #>;
using System.Web.UI.WebControls;
using System.Web.Services.Protocols;

public partial class <#= Iniciales #>_<#= tabla.Nombre #>_GvFv : PaginaBase
{
    // Carga inicial
    protected void Page_Load(object sender, EventArgs e)
    {
        
    }

    // Referencias a los objetos de pantalla
    #region Referencias a los objetos de pantalla
    protected override string Contenedor
    {
        get { return "<#= Iniciales #>_<#= tabla.Nombre #>_GvFv"; }
    }
    protected override GridView Gv
    {
        get { return gv<#= tabla.Nombre #>; }
    }
    protected override FormView Fv
    {
        get { return fv<#= tabla.Nombre #>; }
    }
    protected override ObjectDataSource odsGv
    {
        get { return odsgv<#= tabla.Nombre #>; }
    }
    protected override ObjectDataSource odsFv
    {
        get { return odsfv<#= tabla.Nombre #>; }
    }
    protected override ObjectDataSource odsGvById
    {
        get { return odsgv<#= tabla.Nombre #>_GetById; }
    }
    #endregion

    // Controles para el Filtrar
    #region Controles para el Filtrar
    protected void Filtrar()
    {
        string campo = ddlFiltro.SelectedValue;
        string filtro = tbFiltro.Text;
        switch (campo)
        {
            case "Todos":
                Gv.DataSourceID = odsGv.ID;
                tbFiltro.Text = "";
                break;
			<#+ foreach(var pg in tabla.ProcGenericos){ 
				if (!string.IsNullOrEmpty(pg.ProcNombreFiltro)) {
            #>case "<#= pg.ProcNombreFiltro #>":
                Gv.DataSourceID = "odsgv<#= tabla.Nombre #>_<#= pg.ProcNombre #>";
                break;
			<#+ }} 
        #>}
        Gv.DataBind();
        // Si existe algún error en el FormView lo borra
        lbFvMsgError.Text = ":";
        lbFvMsgInfo.Text = ">";
    }
    protected void ddlFiltro_SelectedIndexChanged(object sender, EventArgs e)
    {
        Filtrar();
    }
    protected void btFiltrar_Click(object sender, EventArgs e)
    {
        Filtrar();        
    }
    #endregion

    // Eventos para despues de FormView
    #region Eventos para despues de FormView
    protected void fv<#= tabla.Nombre #>_ItemUpdated(object sender, FormViewUpdatedEventArgs e)
    {
        if (e.Exception != null)
        {
            var fvs = (Koala.KoalaWebControls.FormViewSetim)sender;
            fvs.HayErrorInsUpd = true;
            e.ExceptionHandled = true;
            e.KeepInEditMode = true;
        }
        else
        {
            tbFiltroId.Text = (string)e.NewValues["Id"];
            Gv.DataSourceID = odsGvById.ID;
            Gv.DataBind();
            Gv.SelectedIndex = 0;
            tbFiltro.Text = "";
        }
    }
    protected void fv<#= tabla.Nombre #>_ItemDeleted(object sender, FormViewDeletedEventArgs e)
    {
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
        }
        else
        {
            Filtrar();
        }
    }
    protected void fv<#= tabla.Nombre #>_ItemInserted(object sender, FormViewInsertedEventArgs e)
    {
        if (e.Exception != null)
        {
            var fvs = (Koala.KoalaWebControls.FormViewSetim)sender;
            fvs.HayErrorInsUpd = true;
            e.ExceptionHandled = true;
            e.KeepInInsertMode = true;
        }
        else
        {
            Gv.DataSourceID = odsGvById.ID;
            Gv.DataBind();
            Gv.SelectedIndex = 0;
            tbFiltro.Text = "";
        }
    }
    #endregion
    // Eventos para despues del ObjectDataSource del FormView
    #region Eventos para despues del ObjectDataSource del FormView
    protected void odsfv<#= tabla.Nombre #>_Inserted(object sender, ObjectDataSourceStatusEventArgs e)
    {
        if (e.Exception != null)
        {
            SoapException ex = (SoapException)e.Exception.InnerException;
            string errorResumen = ExtraeMensajeResumen(ex);
            lbFvMsgError.Text = errorResumen;
            AsignarMensaje(ex.Message, mal);
        }
        else
        {
            tbFiltroId.Text = e.ReturnValue.ToString();
            lbFvMsgInfo.Text = "Registro Insertado.";
            AsignarMensaje("Registro Insertado.",bien);
        }
    }
    protected void odsfv<#= tabla.Nombre #>_Updated(object sender, ObjectDataSourceStatusEventArgs e)
    {
        if (e.Exception != null)
        {
            SoapException ex = (SoapException)e.Exception.InnerException;
            string errorResumen = ExtraeMensajeResumen(ex);
            lbFvMsgError.Text = errorResumen;
            AsignarMensaje(ex.Message, mal);
        }
        else
        {
            lbFvMsgInfo.Text = "Registro Actualizado.";
            AsignarMensaje("Registro Actualizado.", bien);
        }
    }
    protected void odsfv<#= tabla.Nombre #>_Deleted(object sender, ObjectDataSourceStatusEventArgs e)
    {
        if (e.Exception != null)
        {
            SoapException ex = (SoapException)e.Exception.InnerException;
            string errorResumen = ExtraeMensajeResumen(ex);
            lbFvMsgError.Text = errorResumen;
            AsignarMensaje(ex.Message, mal);
        }
        else
        {
            lbFvMsgInfo.Text = "Registro Borrado.";
            AsignarMensaje("Registro Borrado.", bien);
        }
    }
    #endregion

    // Valores por defecto antes de enviar a insertar, actualizar o borrar.
    #region Valores por defecto
    protected void fv<#= tabla.Nombre #>_ItemInserting(object sender, FormViewInsertEventArgs e)
    {
        // Valor por defecto del Id y Estado
        e.Values["Id"] = -1;
        if (String.IsNullOrWhiteSpace((string)e.Values["Estado"])) e.Values["Estado"] = "PEN";
    }
    #endregion

    // Evento cuando se selecciona una fila del Grid
    protected void gv<#= tabla.Nombre #>_SelectedIndexChanged(object sender, EventArgs e)
    {
        lbFvMsgError.Text = ":";
        lbFvMsgInfo.Text = ">";
    }
}
<#+} #>